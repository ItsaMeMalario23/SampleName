#pragma clang diagnostic ignored "-Wmissing-prototypes"
#pragma clang diagnostic ignored "-Wmissing-braces"

#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

template<typename T, size_t Num>
struct spvUnsafeArray
{
    T elements[Num ? Num : 1];
    
    thread T& operator [] (size_t pos) thread
    {
        return elements[pos];
    }
    constexpr const thread T& operator [] (size_t pos) const thread
    {
        return elements[pos];
    }
    
    device T& operator [] (size_t pos) device
    {
        return elements[pos];
    }
    constexpr const device T& operator [] (size_t pos) const device
    {
        return elements[pos];
    }
    
    constexpr const constant T& operator [] (size_t pos) const constant
    {
        return elements[pos];
    }
    
    threadgroup T& operator [] (size_t pos) threadgroup
    {
        return elements[pos];
    }
    constexpr const threadgroup T& operator [] (size_t pos) const threadgroup
    {
        return elements[pos];
    }
};

struct asciidata
{
    float4 color;
    float2 position;
    float scale;
    uint charID;
};

struct type_StructuredBuffer_asciidata
{
    asciidata _m0[1];
};

constant spvUnsafeArray<uint, 6> _50 = spvUnsafeArray<uint, 6>({ 0u, 1u, 2u, 3u, 2u, 1u });
constant spvUnsafeArray<float2, 4> _54 = spvUnsafeArray<float2, 4>({ float2(0.0, 1.0), float2(1.0), float2(0.0), float2(1.0, 0.0) });

struct main0_out
{
    float2 out_var_TEXCOORD0 [[user(locn0)]];
    float4 out_var_TEXCOORD1 [[user(locn1)]];
    float4 gl_Position [[position]];
};

vertex main0_out main0(const device type_StructuredBuffer_asciidata& data [[buffer(0)]], uint gl_VertexIndex [[vertex_id]])
{
    main0_out out = {};
    uint _62 = gl_VertexIndex / 6u;
    uint _63 = gl_VertexIndex % 6u;
    float _70 = float(data._m0[_62].charID % 19u) * 0.052631579339504241943359375;
    float _71 = _70 - 0.0032894737087190151214599609375;
    float _75 = float(data._m0[_62].charID / 19u) * 0.20000000298023223876953125;
    float _76 = _70 + 0.0493421070277690887451171875;
    float _77 = _75 + 0.20000000298023223876953125;
    spvUnsafeArray<float2, 4> _82 = spvUnsafeArray<float2, 4>({ float2(_71, _75), float2(_76, _75), float2(_71, _77), float2(_76, _77) });
    spvUnsafeArray<float2, 4> _60 = _82;
    float2 _91 = ((_54[_50[_63]] * data._m0[_62].scale) + data._m0[_62].position) - float2(1.0);
    float _92 = _91.x;
    float4 _94 = float4(_92, _91.y, 0.0, 1.0);
    bool _104;
    if (!(_50[_63] == 1u))
    {
        _104 = _50[_63] == 3u;
    }
    else
    {
        _104 = true;
    }
    float4 _111;
    if (_104)
    {
        float4 _110 = _94;
        _110.x = _92 - (0.5 * data._m0[_62].scale);
        _111 = _110;
    }
    else
    {
        _111 = _94;
    }
    out.out_var_TEXCOORD0 = _60[_50[_63]];
    out.out_var_TEXCOORD1 = data._m0[_62].color;
    out.gl_Position = _111;
    return out;
}

