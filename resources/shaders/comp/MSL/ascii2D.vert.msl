#pragma clang diagnostic ignored "-Wmissing-prototypes"
#pragma clang diagnostic ignored "-Wmissing-braces"

#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

template<typename T, size_t Num>
struct spvUnsafeArray
{
    T elements[Num ? Num : 1];
    
    thread T& operator [] (size_t pos) thread
    {
        return elements[pos];
    }
    constexpr const thread T& operator [] (size_t pos) const thread
    {
        return elements[pos];
    }
    
    device T& operator [] (size_t pos) device
    {
        return elements[pos];
    }
    constexpr const device T& operator [] (size_t pos) const device
    {
        return elements[pos];
    }
    
    constexpr const constant T& operator [] (size_t pos) const constant
    {
        return elements[pos];
    }
    
    threadgroup T& operator [] (size_t pos) threadgroup
    {
        return elements[pos];
    }
    constexpr const threadgroup T& operator [] (size_t pos) const threadgroup
    {
        return elements[pos];
    }
};

struct asciidata
{
    float4 color;
    float2 position;
    float scale;
    uint charID;
};

struct type_StructuredBuffer_asciidata
{
    asciidata _m0[1];
};

constant float4 _50 = {};
constant float2 _51 = {};

constant spvUnsafeArray<uint, 6> _52 = spvUnsafeArray<uint, 6>({ 0u, 1u, 2u, 3u, 2u, 1u });
constant spvUnsafeArray<float2, 4> _57 = spvUnsafeArray<float2, 4>({ float2(0.0, 2.0), float2(2.0), float2(0.0), float2(2.0, 0.0) });

struct main0_out
{
    float2 out_var_TEXCOORD0 [[user(locn0)]];
    float4 out_var_TEXCOORD1 [[user(locn1)]];
    float4 gl_Position [[position]];
};

vertex main0_out main0(const device type_StructuredBuffer_asciidata& data [[buffer(0)]], uint gl_VertexIndex [[vertex_id]])
{
    main0_out out = {};
    float2 _115;
    float4 _116;
    float4 _117;
    do
    {
        uint _67 = gl_VertexIndex / 6u;
        if (data._m0[_67].charID == 0u)
        {
            _115 = _51;
            _116 = float4(0.0);
            _117 = _50;
            break;
        }
        uint _73 = gl_VertexIndex % 6u;
        float _79 = float(data._m0[_67].charID % 19u) * 0.052631579339504241943359375;
        float _80 = _79 - 0.0032894737087190151214599609375;
        float _84 = float(data._m0[_67].charID / 19u) * 0.20000000298023223876953125;
        float _85 = _79 + 0.0493421070277690887451171875;
        float _86 = _84 + 0.20000000298023223876953125;
        spvUnsafeArray<float2, 4> _91 = spvUnsafeArray<float2, 4>({ float2(_80, _84), float2(_85, _84), float2(_80, _86), float2(_85, _86) });
        spvUnsafeArray<float2, 4> _63 = _91;
        _115 = _63[_52[_73]];
        _116 = data._m0[_67].color;
        _117 = float4(((_57[_52[_73]].x * data._m0[_67].scale) + ((device float*)&data._m0[_67].position)[0]) - 1.0, (((_57[_52[_73]].y * data._m0[_67].scale) * 1.77777779102325439453125) + ((device float*)&data._m0[_67].position)[1]) - 1.0, 0.0, 1.0);
        break;
    } while(false);
    out.out_var_TEXCOORD0 = _115;
    out.out_var_TEXCOORD1 = _116;
    out.gl_Position = _117;
    return out;
}

